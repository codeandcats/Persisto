// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Persisto.Templates
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.Data;
    using System.Data.Common;
    using Persisto;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class PersistorTemplate : PersistorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Text;\r\nusing System.Diagnostics;\r\nusing System.Data;\r\nusing System.Data.Common" +
                    ";\r\nusing System.Reflection;\r\nusing Persisto;\r\nusing ");
            
            #line 20 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace Persisto.Generated.Persistors\r\n{\r\n\tpublic class ");
            
            #line 24 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write("Persistor : PersistorBase, IPersistor<");
            
            #line 24 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{\r\n\t\tpublic ");
            
            #line 26 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write("Persistor(IDbModelInfo<");
            
            #line 26 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write("> modelInfo)\r\n\t\t\t: base(modelInfo)\r\n\t\t{\r\n\t\t\tModelInfo = modelInfo;\r\n\r\n");
            
            #line 31 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

var membersWithFields = 
	ModelInfo.Members
	.Where(m => m.IsBackedByField)
	.ToArray();

foreach (IDbMemberInfo member in ModelInfo.Members)
{
	WriteLine("\t\t\tMemberInfo_{0} = modelInfo[\"{0}\"];", member.Name);
}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t\t\r\n\t\tnew public IDbModelInfo<");
            
            #line 44 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write("> ModelInfo { get; private set; }\r\n\t\t\r\n");
            
            #line 46 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (IDbMemberInfo member in ModelInfo.Members)
{
	WriteLine("\t\tinternal IDbMemberInfo MemberInfo_" + member.Name + " { get; private set; }");
}

            
            #line default
            #line hidden
            this.Write("\r\n\t\tnew public IEnumerable<");
            
            #line 53 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write("> LoadModels(\r\n\t\t\tSystem.Data.Common.DbConnection db,\r\n\t\t\tPersisto.LoadOptions op" +
                    "tions)\r\n\t\t{\r\n\t\t\tvar models = new List<");
            
            #line 57 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(@">();
			
			Func<System.Data.Common.DbConnection> createConnection = options.CreateConnectionFunc;
			if (createConnection == null)
			{
				createConnection = DbModelInfo.CreateConnectionFunc;
			}

			using (var command = db.CreateCommand())
			{
");
            
            #line 67 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

// Build sql for loading models

var baseModelInfos = new Stack<IDbModelInfo>();

var info = ModelInfo;
IDbModelInfo veryBaseModelInfo = null;

while (info != null)
{
	baseModelInfos.Push(info);
	veryBaseModelInfo = info;
	info = info.BaseModelInfo;
}

var selectSql = new StringBuilder();
selectSql.Append("SELECT ");

var fromSql = new StringBuilder();

var addedFirstTable = false;
IDbModelInfo firstTable;

var fieldOffsets = new Dictionary<IDbModelInfo, int>();
var fieldOffset = 0;

var familyOfModelInfos = new List<IDbModelInfo>();

var addedFirstField = false;

if (!string.IsNullOrWhiteSpace(veryBaseModelInfo.TypeNameFieldName))
{
	selectSql.Append(veryBaseModelInfo.TableName + "." + veryBaseModelInfo.TypeNameFieldName);
	addedFirstField = true;
	fieldOffset++;
}

while (baseModelInfos.Count > 0)
{
	info = baseModelInfos.Pop();

	familyOfModelInfos.Add(info);

	fieldOffsets.Add(info, fieldOffset);

	foreach (var memberInfo in info.Members.Where(m => m.IsBackedByField))
	{
		if (addedFirstField)
		{
			selectSql.Append(", ");
		}
		else
		{
			addedFirstField = true;
		}
		selectSql.Append(info.TableName + "." + memberInfo.FieldName);
		fieldOffset++;
	}

	if (addedFirstTable)
	{
		fromSql.Append(string.Format(
			" JOIN {0} ON ({0}.{1} = {2}.{3}){4}",
			info.TableName,
			info.ID.FieldName,
			info.BaseModelInfo.TableName,
			info.BaseModelInfo.ID.FieldName,
			string.IsNullOrWhiteSpace(info.Filter) ? "" : " AND (" + info.Filter + ")"));
	}
	else
	{
		firstTable = info;
		addedFirstTable = true;
		fromSql.Append(" FROM " + info.TableName);
	}
}

Action<IDbModelInfo> addDescendents = null;

addDescendents = (IDbModelInfo modelInfo) =>
{
	foreach (var subTypeInfo in modelInfo.Descendents)
	{
		familyOfModelInfos.Add(subTypeInfo);

		fieldOffsets.Add(subTypeInfo, fieldOffset);

		foreach (var memberInfo in subTypeInfo.Members.Where(m => m.IsBackedByField))
		{
			if (addedFirstField)
			{
				selectSql.Append(", ");
			}
			else
			{
				addedFirstField = true;
			}
			selectSql.Append(subTypeInfo.TableName + "." + memberInfo.FieldName);
			fieldOffset++;
		}

		fromSql.Append(string.Format(
			" LEFT OUTER JOIN {0} ON ({0}.{1} = {2}.{3}){4}",
			subTypeInfo.TableName,
			subTypeInfo.ID.FieldName,
			modelInfo.TableName,
			modelInfo.ID.FieldName,
			string.IsNullOrWhiteSpace(subTypeInfo.Filter) ? "" : " AND (" + subTypeInfo.Filter + ")"));

		addDescendents(subTypeInfo);
	}
};

addDescendents(ModelInfo);

            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar loadSql = new StringBuilder(@\"");
            
            #line 182 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((selectSql.ToString() + " " + fromSql.ToString()).Replace("\n", " ").Replace("\r", " ")));
            
            #line default
            #line hidden
            this.Write(@""");

				if (!string.IsNullOrWhiteSpace(options.Joins))
				{
					loadSql.Append("" "" + options.Joins + "" "");
				}
				
				if (!string.IsNullOrWhiteSpace(options.Where))
				{
					if (!options.Where.Trim().ToLower().StartsWith(""where""))
					{
						loadSql.Append("" WHERE"");
					}
					loadSql.Append("" "" + options.Where + "" "");
				}

				if (!string.IsNullOrWhiteSpace(options.OrderBy))
				{
					if (!options.Where.Trim().ToLower().StartsWith(""order by""))
					{
						loadSql.Append("" ORDER BY"");
					}
					loadSql.Append("" "" + options.OrderBy + "" "");
				}

				command.CommandText = loadSql.ToString();
				
				var paramNames = options.GetParamNames();

				if (options.ParamValues != null)
				{
					for (var index = 0; index < options.ParamValues.Length; index++)
					{
						command.CreateParameter(paramNames[index], options.ParamValues[index]);
					}
				}

				Dictionary<string, Type> quickTypeLookup = new Dictionary<string, Type>();
				Assembly assembly = Assembly.GetExecutingAssembly();
				
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
");
            
            #line 226 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

if (!string.IsNullOrWhiteSpace(veryBaseModelInfo.TypeNameFieldName))
{
	WriteLine("\t\t\t\t\t\tstring modelTypeName = reader.GetString(0);");
	WriteLine("\t\t\t\t\t\tType modelType;");
	WriteLine("\t\t\t\t\t\tif (!quickTypeLookup.TryGetValue(modelTypeName, out modelType))");
	WriteLine("\t\t\t\t\t\t{");
	WriteLine("\t\t\t\t\t\t\tmodelType = assembly.GetType(modelTypeName);");
	WriteLine("\t\t\t\t\t\t\tquickTypeLookup.Add(modelTypeName, modelType);");
	WriteLine("\t\t\t\t\t\t}");
	WriteLine("\t\t\t\t\t\tvar model = (Persisto.IGeneratedModel)Activator.CreateInstance(modelType);", ModelInfo.GeneratedModelTypeFullName);
}
else
{
	WriteLine("\t\t\t\t\t\tvar model = new {0}();", ModelInfo.GeneratedModelTypeFullName);
}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\r\n\t\t\t\t\t\tmodel._Support.CreateConnectionFunc = createConnection;\r\n");
            
            #line 245 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (var modelInfo in familyOfModelInfos)
{
	WriteLine("\t\t\t\t\t\t{0}.SetFieldsFromReader(model as {1}, reader, {2});",
		"Persisto.Generated.Persistors." + modelInfo.ModelType.Name + "Persistor",
		modelInfo.ModelType.FullName,
		fieldOffsets[modelInfo]);
}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tmodel._Support.ExistsInDatabase = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmodels.Add((");
            
            #line 256 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(")model);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn models;\r\n\t\t}\r\n\r\n\t\tinternal static void" +
                    " SetFieldsFromReader(");
            
            #line 264 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(" model, DbDataReader reader, int fieldOffset)\r\n\t\t{\r\n\t\t\tif (model == null)\r\n\t\t\t{\r\n" +
                    "\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar generatedModel = (IGeneratedModel)model;\r\n\r\n");
            
            #line 273 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

for (var memberIndex = 0; memberIndex < ModelInfo.Members.Length; memberIndex++)
{
	DbMemberInfo member = ModelInfo.Members[memberIndex];
	string memberName = "model." + member.Name;
	
	Type memberType = member.MemberType;
	
	string method = "";
	
	var manyToOne = member.Relation as DbRelation.ManyToOneAttribute;
	var oneToMany = member.Relation as DbRelation.OneToManyAttribute;
	var manyToMany = member.Relation as DbRelation.ManyToManyAttribute;

	var foreignTypeModelInfo = member.Relation == null ? null : DbModelInfo.Get(member.Relation.ForeignType);
	
	if (member.Relation != null)
	{
		if (manyToOne != null)
		{
			WriteLine("\t\t\t// ManyToOne");
			if ((bool)member.Relation.LoadOnDemand)
			{
				IDbModelInfo foreignModelInfo = DbModelInfo.Get(member.Relation.ForeignType);
				
				memberType = foreignModelInfo.ID.MemberType;
				
				WriteLine("{0}generatedModel._Support.HasMemberLoaded[\"{1}\"] = false;", "\t\t\t", member.Name);

				memberName = string.Format("generatedModel._Support.ObjectIds[\"{0}\"]", member.Name + foreignModelInfo.ID.Name);
				//continue;
			}
			else
			{
				method = 
					"DbModelInfo.Get<" + member.MemberType.FullName +
					">().Persistor.LoadModel(db, new LoadOptions() { Where = \"" +
					foreignTypeModelInfo.ID.FieldName + " = @" + foreignTypeModelInfo.ID.FieldName +
					"\", ParamValues = new object[] { reader.GetValue(fieldOffset + " + memberIndex.ToString() + ") } })";
				
				WriteLine("{0}{1} = {2};", "\t\t\t", memberName, method);
				
				continue;
			}
		}
		else if (oneToMany != null)
		{
			WriteLine("\t\t\t// OneToMany");
			if (!member.Relation.LoadOnDemand)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tmodel.");
            
            #line 324 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" = db.LoadModels<");
            
            #line 324 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Relation.ForeignType.FullName));
            
            #line default
            #line hidden
            this.Write(">(\r\n\t\t\t\t\t\t\tnew LoadOptions()\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tWhere = \"");
            
            #line 327 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.FieldName));
            
            #line default
            #line hidden
            this.Write(" = @");
            
            #line 327 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.FieldName));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\t\t\t\tParamValues = new object[] { model.");
            
            #line 328 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.Name));
            
            #line default
            #line hidden
            this.Write(" } \r\n\t\t\t\t\t\t\t}).ToList();\r\n");
            
            #line 330 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

			}
			continue;
		}
		else
		{
			// TODO: Support ManyToMany
			WriteLine("\t\t\t// ManyToMany");
			continue;
		}
	}

	if (!member.IsBackedByField)
	{
		continue;
	}

	if (memberType == typeof(Guid))
	{
		if (member.DataType == DbType.Guid)
		{
			method = string.Format("reader.IsDBNull(fieldOffset + {0}) ? default(Guid) : new Guid(reader.GetValue(fieldOffset + {0}))", memberIndex);
		}
		else
		{
			method = string.Format("reader.IsDBNull(fieldOffset + {0}) ? default(Guid) : new Guid(reader.GetString(fieldOffset + {0}))", memberIndex);
		}
	}
	else if (memberType == typeof(int))
	{
		method = string.Format("reader.GetInt32(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(Int16))
	{
		method = string.Format("reader.GetInt16(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(Int64))
	{
		method = string.Format("reader.GetInt64(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(DateTime))
	{
		method = string.Format("reader.GetDateTime(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(string))
	{
		method = string.Format("reader.GetString(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(double))
	{
		method = string.Format("reader.GetDouble(fieldOffset + {0})", memberIndex);
	}
	else if (memberType.IsEnum)
	{
		if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString))
		{
			method = string.Format("({0})Enum.Parse(typeof({0}), reader.GetString(fieldOffset + {1}))",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int16)
		{
			method = string.Format("({0})reader.GetInt16(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int32)
		{
			method = string.Format("({0})reader.GetInt32(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int64)
		{
			method = string.Format("({0})reader.GetInt64(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Byte)
		{
			method = string.Format("({0})reader.GetByte(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else
		{
			continue;
		}
	}
	else if (memberType == typeof(bool))
	{
		if (member.DataType == DbType.Boolean)
		{
			method = string.Format("reader.GetBoolean(fieldOffset + {0})", memberIndex);
		}
		else if (member.DataType == DbType.Int16)
		{
			method = string.Format("reader.GetInt16(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Int32)
		{
			method = string.Format("reader.GetInt32(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Int64)
		{
			method = string.Format("reader.GetInt64(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Byte)
		{
			method = string.Format("reader.GetByte(fieldOffset + {0}) > 0", memberIndex);
		}
		else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString))
		{
			method = string.Format(
				"!reader.GetString(fieldOffset + {0}).Equals(\"N\", StringComparison.CurrentCultureIgnoreCase)", memberIndex);
		}
		else
		{
			continue;
		}
	}
	else
	{
		continue;
	}
	
	WriteLine("{0}{1} = {2};", "\t\t\t", memberName, method);
}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n");
            
            #line 456 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"


Action<bool, bool> setParameters =
	delegate(bool includeId, bool useIncrementorValues)
	{
		for (var memberIndex = 0; memberIndex < membersWithFields.Length; memberIndex++)
		{
			DbMemberInfo member = membersWithFields[memberIndex];
			string memberName = member.Name;
			var expression = "";

			if (member.IsIdentity && !includeId)
			{
				continue;
			}

			if (useIncrementorValues && (member.Incrementor != null))
			{
				expression = "newValueFor" + memberName + ".ToString()";
			}
			else if (member.Relation != null)
			{
				if (member.Relation is DbRelation.ManyToOneAttribute)
				{
					IDbModelInfo foreignModelInfo = DbModelInfo.Get(member.Relation.ForeignType);
					
					if ((bool)member.Relation.LoadOnDemand)
					{
						string generatedModelTypeName = "Persisto.Generated.Models." + ModelInfo.ModelType.Name;						
						
						string foreignModelIdName = foreignModelInfo.ID.Name;
						string cast = foreignModelInfo.ID.MemberType == typeof(Guid) ? "(Guid)" : "";
						string toString = foreignModelInfo.ID.MemberType == typeof(Guid) ?  ".ToString(true)" : "";
						
						expression = string.Format(
							"model is IGeneratedModel ? ({4}(((IGeneratedModel)model)._Support.ObjectIds[\"{1}{2}\"])){3} : (model.{1} == null ? null : (object)model.{1}.{2}{3})",
							generatedModelTypeName,
							member.Name,
							foreignModelIdName,
							toString,
							cast);
					}
					else
					{
						string foreignModelIdName = foreignModelInfo.ID.Name;
						if (foreignModelInfo.ID.MemberType == typeof(Guid))
						{
							foreignModelIdName += ".ToString(true)";
						}
						
						expression = string.Format("model.{0} == null ? null : model.{0}.{1}",
							member.Name,
							foreignModelIdName);
					}
				}
				else if (member.Relation is DbRelation.OneToManyAttribute)
				{
					continue;
				}
				else
				{
					// TODO: Support OneToMany + ManyToMany
					continue;
				}
			}
			else
			{
				if (member.MemberType.IsEnum)
				{
					if ((member.DataType == DbType.Int16) || (member.DataType == DbType.Int32) ||
						(member.DataType == DbType.Int64) || (member.DataType == DbType.Byte) ||
						(member.DataType == DbType.SByte))
					{
						expression = string.Format("(int)model.{0}", memberName);
					}
					else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString) ||
							(member.DataType == DbType.AnsiStringFixedLength))
					{
						expression = string.Format("model.{0}.ToString()", memberName);
					}
				}
				else if (member.MemberType == typeof(bool))
				{
					if ((member.DataType == DbType.Int16) || (member.DataType == DbType.Int32) ||
						(member.DataType == DbType.Int64) || (member.DataType == DbType.Byte) ||
						(member.DataType == DbType.SByte))
					{
						expression = string.Format("model.{0} ? 1 : 0", memberName);
					}
					else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString) ||
							(member.DataType == DbType.AnsiStringFixedLength))
					{
						expression = string.Format("model.{0} ? \"Y\" : \"N\"", memberName);
					}
					else
					{
						expression = "model." + memberName;
					}
				}
				else if (member.MemberType == typeof(Guid))
				{
					expression = "model." + memberName + ".ToString(true)";
				}
				else
				{
					expression = "model." + memberName;
				}
			}

			WriteLine("{0}command.CreateParameter(\"@{1}\", {2});", "\t\t\t\t", member.FieldName, expression);
		}
	};


            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tnew public ");
            
            #line 571 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(@" LoadModel(
			System.Data.Common.DbConnection db,
			Persisto.LoadOptions options)
		{
			var models = LoadModels(db, options);

			var model = models.FirstOrDefault();

			return model;
		}

		/*
		var param = cmd.CreateParameter();
					param.ParameterName = """";
					param.DbType = DbExtensions.DbTypeFromType(typeof(string));
					param.Direction = System.Data.ParameterDirection.Input;
					cmd.Parameters.Add(param);
		*/
		
");
            
            #line 590 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

Action<IDbModelInfo> addManyToManyUpdateMethods = (IDbModelInfo modelInfo) =>
{
	foreach (var member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
	{
		var relation = (DbRelation.ManyToManyAttribute)member.Relation;
		var foreignModelInfo = DbModelInfo.Get(relation.ForeignType);

		var localIDSuffix = modelInfo.ID.MemberType == typeof(Guid) ? ".ToString(true)" : "";
		var foreignIDSuffix = foreignModelInfo.ID.MemberType == typeof(Guid) ? ".ToString(true)" : "";

            
            #line default
            #line hidden
            this.Write("\t\tpublic void Update_");
            
            #line 602 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("(System.Data.Common.DbConnection db, ");
            
            #line 602 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n\t\t\tvar generatedModel = model as IGeneratedModel;\r\n\t\t\t\r\n\t\t\tif (gene" +
                    "ratedModel != null)\r\n\t\t\t{\r\n\t\t\t\tif (!generatedModel._Support.HasMemberLoaded[\"");
            
            #line 608 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\"])\r\n\t\t\t\t{\r\n\t\t\t\t\t// ");
            
            #line 610 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" couldn\'t have changed as it hasn\'t been flagged as loaded\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n" +
                    "\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (model.");
            
            #line 616 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If member is null then just assume we don\'t need to upd" +
                    "ate it\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get a list of existing ");
            
            #line 623 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignModelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 623 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignModelInfo.ID.Name));
            
            #line default
            #line hidden
            this.Write("s for this ");
            
            #line 623 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelInfo.ModelType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar existingList = new List<string>();\r\n\t\t\tusing (var existing = db.CreateCo" +
                    "mmand())\r\n\t\t\t{\r\n\t\t\t\texisting.CommandText = \"SELECT ");
            
            #line 627 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write(" FROM ");
            
            #line 627 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.TableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 627 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write(" = @");
            
            #line 627 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\texisting.CreateParameter(\"");
            
            #line 628 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write("\", DbType.String, model.");
            
            #line 628 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelInfo.ID.Name + localIDSuffix));
            
            #line default
            #line hidden
            this.Write(@");
				
				using (var reader = existing.ExecuteReader())
				{
					while (reader.Read())
					{
						existingList.Add(reader.GetString(0));
					}
				}
			}

			using (var insert = db.CreateCommand())
			{
				insert.CommandText = ""INSERT INTO ");
            
            #line 641 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.TableName));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 641 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 641 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write(") VALUES (@");
            
            #line 641 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write(", @");
            
            #line 641 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write(")\";\r\n\t\t\t\tinsert.CreateParameter(\"");
            
            #line 642 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write("\", DbType.String, null);\r\n\t\t\t\tinsert.CreateParameter(\"");
            
            #line 643 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write("\", DbType.String, null);\r\n\t\t\t\t\t\r\n\t\t\t\tforeach (var item in model.Formats)\r\n\t\t\t\t{\r\n" +
                    "\t\t\t\t\tvar index = existingList.IndexOf(item.Id.ToString());\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif (ind" +
                    "ex == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinsert.Parameters[0].Value = model.");
            
            #line 651 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelInfo.ID.Name + localIDSuffix));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t\t\tinsert.Parameters[1].Value = item.");
            
            #line 652 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignModelInfo.ID.Name + foreignIDSuffix));
            
            #line default
            #line hidden
            this.Write(@";
						insert.ExecuteNonQuery();
					}
					else
					{
						existingList.RemoveAt(index);
					}
				}
			}
				
			if (existingList.Count > 0)
			{
				using (var delete = db.CreateCommand())
				{
					delete.CommandText = ""DELETE FROM ");
            
            #line 666 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.TableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 666 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write(" = @");
            
            #line 666 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write(" AND ");
            
            #line 666 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write(" = @");
            
            #line 666 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\t\tdelete.CreateParameter(\"");
            
            #line 667 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey1));
            
            #line default
            #line hidden
            this.Write("\", DbType.String, null);\r\n\t\t\t\t\tdelete.CreateParameter(\"");
            
            #line 668 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.ForeignKey2));
            
            #line default
            #line hidden
            this.Write("\", DbType.String, null);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tforeach (var id in existingList)\r\n\t\t\t\t\t{\r\n" +
                    "\t\t\t\t\t\tdelete.Parameters[0].Value = model.");
            
            #line 672 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelInfo.ID.Name + localIDSuffix));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t\t\tdelete.Parameters[1].Value = id;\r\n\t\t\t\t\t\tdelete.ExecuteNonQuery();\r\n\t\t\t\t\t" +
                    "}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 679 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

	}
};

addManyToManyUpdateMethods(ModelInfo);

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic void InsertModel(\r\n\t\t\tSystem.Data.Common.DbConnection db,\r\n\t\t\t");
            
            #line 688 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n\t\t\tif (ModelInfo.BaseModelInfo != null)\r\n\t\t\t{\r\n\t\t\t\tModelInfo.BaseMo" +
                    "delInfo.Persistor.InsertModel(db, model);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tusing (var command = db" +
                    ".CreateCommand())\r\n\t\t\t{\r\n");
            
            #line 697 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"


StringBuilder insertSql = new StringBuilder("INSERT INTO " + ModelInfo.TableName);

List<string> fieldNamesToInsert = new List<string>();
fieldNamesToInsert.AddRange(membersWithFields.Select(m => m.FieldName));
if (!string.IsNullOrWhiteSpace(ModelInfo.TypeNameFieldName))
{
	fieldNamesToInsert.Add(ModelInfo.TypeNameFieldName);
}

insertSql.Append(" (" + string.Join(", ", fieldNamesToInsert.ToArray()) + ")");
insertSql.Append(" VALUES (@" + string.Join(", @", fieldNamesToInsert.ToArray()) + ")");


            
            #line default
            #line hidden
            this.Write("\t\t\t\tcommand.CommandText = \"");
            
            #line 712 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(insertSql.ToString()));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n");
            
            #line 714 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (IDbMemberInfo member in ModelInfo.Members.Where(m => m.Incrementor != null))
{
	WriteLine("\t\t\t\tvar newValueFor{0} = model.{0} != default({1}) ? model.{0} : ({1})MemberInfo_{0}.Incrementor.Increment(ModelInfo, MemberInfo_{0}, model);", member.Name, member.MemberType.FullName);
}

WriteLine("");

setParameters(true, true);

if (!string.IsNullOrWhiteSpace(ModelInfo.TypeNameFieldName))
{
	WriteLine("\t\t\t\tcommand.CreateParameter(\"@{0}\", model.GetType().FullName);", ModelInfo.TypeNameFieldName);
}

            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tcommand.ExecuteNonQuery();\r\n\r\n");
            
            #line 732 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (IDbMemberInfo member in ModelInfo.Members.Where(m => m.Incrementor != null))
{
	WriteLine("\t\t\t\tmodel.{0} = newValueFor{0};", member.Name);
}

            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar generatedModel = model as Persisto.IGeneratedModel;\r\n\t\t\t\tif (generatedMod" +
                    "el != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tgeneratedModel._Support.ExistsInDatabase = true;\r\n\t\t\t\t}" +
                    "\r\n\r\n");
            
            #line 743 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (var member in ModelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
{
	WriteLine("\t\t\t\tUpdate_{0}(db, model);", member.Name);
}

            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic void UpdateModel(\r\n\t\t\tSystem.Data.Common.DbConnection db," +
                    "\r\n\t\t\t");
            
            #line 755 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n\t\t\tif (ModelInfo.BaseModelInfo != null)\r\n\t\t\t{\r\n\t\t\t\tModelInfo.BaseMo" +
                    "delInfo.Persistor.UpdateModel(db, model);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tusing (var command = db" +
                    ".CreateCommand())\r\n\t\t\t{\r\n");
            
            #line 764 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

StringBuilder updateSql = new StringBuilder("UPDATE " + ModelInfo.TableName + " SET ");
updateSql.Append(string.Join(", ", membersWithFields
	.Where(m => !m.IsIdentity)
	.Select(m => string.Format("{0} = @{0}", m.FieldName)).ToArray()));
updateSql.Append(" WHERE " + string.Format("{0} = @{0}", ModelInfo.ID.FieldName));

            
            #line default
            #line hidden
            this.Write("\t\t\t\tcommand.CommandText = @\"");
            
            #line 771 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateSql.ToString()));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\t\r\n");
            
            #line 773 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
 setParameters(false, false); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tcommand.ExecuteNonQuery();\r\n\t\t\t\t\r\n\t\t\t\tvar generatedModel = model as Per" +
                    "sisto.IGeneratedModel;\r\n\t\t\t\tif (generatedModel != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tgeneratedMo" +
                    "del._Support.ExistsInDatabase = true;\r\n\t\t\t\t}\r\n\r\n");
            
            #line 783 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

foreach (var member in ModelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
{
	WriteLine("\t\t\t\tUpdate_{0}(db, model);", member.Name);
}

            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic void DeleteModel(\r\n\t\t\tSystem.Data.Common.DbConnection db," +
                    "\r\n\t\t\t");
            
            #line 795 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ModelType.FullName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n\t\t{\r\n\t\t\tusing (var command = db.CreateCommand())\r\n\t\t\t{\r\n\t\t\t\tcommand.Comm" +
                    "andText = @\"DELETE FROM ");
            
            #line 799 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.TableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 799 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.FieldName));
            
            #line default
            #line hidden
            this.Write(" = @");
            
            #line 799 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.FieldName));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t\t\r\n\t\t\t\tcommand.CreateParameter(\r\n\t\t\t\t\t\"@");
            
            #line 802 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.FieldName));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\t\t\t\tSystem.Data.DbType.");
            
            #line 803 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.DataType.ToString()));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\tmodel.");
            
            #line 804 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInfo.ID.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\ttrue);\r\n\t\t\t\t\r\n\t\t\t\tcommand.ExecuteNonQuery();\r\n\t\t\t\t\r\n\t\t\t\tvar generatedMode" +
                    "l = model as Persisto.IGeneratedModel;\r\n\t\t\t\tif (generatedModel != null)\r\n\t\t\t\t{\r\n" +
                    "\t\t\t\t\tgeneratedModel._Support.ExistsInDatabase = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Ben Daniel\Documents\Projects\Libraries\Persisto\Templates\PersistorTemplate.tt"

private global::Persisto.IDbModelInfo _ModelInfoField;

/// <summary>
/// Access the ModelInfo parameter of the template.
/// </summary>
private global::Persisto.IDbModelInfo ModelInfo
{
    get
    {
        return this._ModelInfoField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelInfoValueAcquired = false;
if (this.Session.ContainsKey("ModelInfo"))
{
    if ((typeof(global::Persisto.IDbModelInfo).IsAssignableFrom(this.Session["ModelInfo"].GetType()) == false))
    {
        this.Error("The type \'Persisto.IDbModelInfo\' of the parameter \'ModelInfo\' did not match the t" +
                "ype of the data passed to the template.");
    }
    else
    {
        this._ModelInfoField = ((global::Persisto.IDbModelInfo)(this.Session["ModelInfo"]));
        ModelInfoValueAcquired = true;
    }
}
if ((ModelInfoValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModelInfo");
    if ((data != null))
    {
        if ((typeof(global::Persisto.IDbModelInfo).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'Persisto.IDbModelInfo\' of the parameter \'ModelInfo\' did not match the t" +
                    "ype of the data passed to the template.");
        }
        else
        {
            this._ModelInfoField = ((global::Persisto.IDbModelInfo)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class PersistorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
