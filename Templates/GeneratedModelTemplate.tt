<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Persisto" #>
<#@ parameter name="ModelInfo" type="Persisto.IDbModelInfo" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Persisto;

<#

Func<Stack<IDbModelInfo>> getModelInfoStack = () =>
	{
		var stack = new Stack<IDbModelInfo>();
		
		var info = ModelInfo;

		while (info != null)
		{
			stack.Push(info);
			info = info.BaseModelInfo;
		}

		return stack;
	};

#>

namespace Persisto.Generated.Models
{
	public class <#= ModelInfo.GeneratedModelTypeName #> : <#= ModelInfo.ModelType.FullName #>, IGeneratedModel
	{
		public <#= ModelInfo.GeneratedModelTypeName #>()
		{
			// Initially set to true so new instances don't try to load objects 
			// that clearly won't be there. When LoadModel returns one of these
			// it will set this property to false.
<#
var baseModelInfos = getModelInfoStack();

var addedMembers = new List<string>();

while (baseModelInfos.Count > 0)
{
	var modelInfo = baseModelInfos.Pop();

	if (modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToOneAttribute)
		.Where(m => m.Relation.LoadOnDemand)
		.Where(m => !addedMembers.Contains(m.Name))
		.Any())
	{
		WriteLine("\t\t\t");
		WriteLine("\t\t\t// {0}", modelInfo.ModelType.Name);
	}

	foreach (DbMemberInfo member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToOneAttribute)
		.Where(m => m.Relation.LoadOnDemand)
		.Where(m => !addedMembers.Contains(m.Name)))
	{
		WriteLine("\t\t\t_Support.HasMemberLoaded[\"{0}\"] = true;", member.Name);
	
		DbRelation.ManyToOneAttribute manyToOne = (DbRelation.ManyToOneAttribute)member.Relation;
	
		DbMemberInfo foreignMember = DbModelInfo.Get(manyToOne.ForeignType).ID;
	
		IDbModelInfo foreignModelInfo = DbModelInfo.Get(manyToOne.ForeignType);
	
		string backingMemberName = member.Name + foreignModelInfo.ID.Name;

		WriteLine("\t\t\t_Support.ObjectIds[\"{0}\"] = default({1});", backingMemberName, foreignMember.MemberType.FullName);
	}
}
#>
		}

		private ModelSupport __support = new ModelSupport();
		public ModelSupport _Support
		{
			get { return __support; }
			set { __support = value; }
		}
<#
baseModelInfos = getModelInfoStack();
addedMembers = new List<string>();

while (baseModelInfos.Count > 0)
{
	var modelInfo = baseModelInfos.Pop();

	if (modelInfo.Members.Any(m => m.Relation == null))
	{
		WriteLine("\t\t");
		WriteLine("\t\t// ---------- {0} ----------", modelInfo.ModelType.Name);
		WriteLine("\t\t");
	}

	foreach (DbMemberInfo member in modelInfo.Members
		.Where(m => m.Relation == null)
		.Where(m => !addedMembers.Contains(m.Name)))
	{
		string memberModifiers = " ";
		string backingMemberName = "";
	
		if (!ModelInfo.ModelType.IsInterface)
		{
			backingMemberName = "base." + member.Name;

			if (member.IsVirtual)
			{
				memberModifiers = "override ";
			}
			else
			{
				memberModifiers = "new ";
			}
		}

		if (ModelInfo.ModelType.IsInterface || member.IsAbstract)
		{
			backingMemberName = member.Name.ToCamelCase();
			WriteLine("\t\tprivate " + member.MemberType.FullName + " " + backingMemberName + ";");
		}
#>
		public <#= memberModifiers + member.MemberType.FullName + " " + member.Name #>
		{
			get
			{
				return <#= backingMemberName #>;
			}
			set
			{
				if (value == <#= backingMemberName #>)
				{
					return;
				}
				
				<#= backingMemberName #> = value;
				
				_Support.FieldChanged("<#= member.Name #>");
			}
		}

<#
	}

#>
		
<#
	foreach (DbMemberInfo member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToOneAttribute)
		.Where(m => m.Relation.LoadOnDemand)
		.Where(m => !addedMembers.Contains(m.Name)))
	{
		DbRelation.ManyToOneAttribute manyToOne = (DbRelation.ManyToOneAttribute)member.Relation;
	
		DbMemberInfo foreignMember = DbModelInfo.Get(manyToOne.ForeignType).ID;
	
		IDbModelInfo foreignModelInfo = DbModelInfo.Get(manyToOne.ForeignType);
	
		string backingMemberName = member.Name + foreignModelInfo.ID.Name;
#>
		public override <#= member.MemberType.FullName #> <#= member.Name #>
		{
			get
			{
				if (_Support.HasMemberLoaded["<#=member.Name#>"])
				{
					using (var db = this._Support.CreateConnection())
					{
						base.<#= member.Name #> = db.LoadModelById<<#= member.MemberType.FullName #>>(_Support.ObjectIds["<#= backingMemberName #>"]);
					}
					_Support.HasMemberLoaded["<#=member.Name#>"] = true;
				}
				
				return base.<#= member.Name #>;
			}
			set
			{
				if (value == null)
				{
					_Support.ObjectIds["<#= backingMemberName #>"] = default(<#= foreignMember.MemberType.FullName #>);
				}
				else
				{
					_Support.ObjectIds["<#= backingMemberName #>"] = value.<#= foreignMember.Name #>;
				}
				
				base.<#= member.Name #> = value;
				
				_Support.HasMemberLoaded["<#=member.Name#>"] = true;
			}
		}
<#
	}

	foreach (IDbMemberInfo member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.OneToManyAttribute)
		.Where(m => m.Relation.LoadOnDemand)
		.Where(m => !addedMembers.Contains(m.Name)))
	{
		string backingMemberName = 
			member.Name.ToLower().Substring(0, 1) +
			member.Name.ToLower().Substring(1);

		string foreignFieldName = member.Relation.FieldName;
#>
		private List<<#= member.Relation.ForeignType.FullName #>> <#= backingMemberName #>;
		
		public override List<<#= member.Relation.ForeignType.FullName #>> <#= member.Name #>
		{
			get
			{
				if (!_Support.HasMemberLoaded["<#=member.Name#>"])
				{
					using (var db = this._Support.CreateConnection())
					{
						<#= backingMemberName #> = db.LoadModels<<#= member.Relation.ForeignType.FullName #>>(
							new LoadOptions()
							{
								Where = "<#= foreignFieldName #> = @<#= foreignFieldName #>",
								ParamValues = new object[] { <#= ModelInfo.ID.Name #> } 
							}).ToList();
					}
					_Support.HasMemberLoaded["<#=member.Name#>"] = true;
				}
				
				return <#= backingMemberName #>;
			}
			set
			{
				if (value == null)
				{
					if (_Support.HasMemberLoaded["<#=member.Name#>"])
					{
						<#= backingMemberName #>.Clear();
					}
				}
				else
				{
					<#= backingMemberName #> = value;
				}
				
				_Support.HasMemberLoaded["<#=member.Name#>"] = true;
			}
		}
<#
	}


	foreach (IDbMemberInfo member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute)
		.Where(m => m.Relation.LoadOnDemand)
		.Where(m => !addedMembers.Contains(m.Name)))
	{
		string backingMemberName = 
			member.Name.ToLower().Substring(0, 1) +
			member.Name.ToLower().Substring(1);

		DbRelation.ManyToManyAttribute manyToMany = member.Relation as DbRelation.ManyToManyAttribute;

		IDbModelInfo foreignModelInfo = DbModelInfo.Get(manyToMany.ForeignType);
#>
		private List<<#= member.Relation.ForeignType.FullName #>> <#= backingMemberName #>;
		
		public override List<<#= member.Relation.ForeignType.FullName #>> <#= member.Name #>
		{
			get
			{
				if (!_Support.HasMemberLoaded["<#= member.Name #>"])
				{
					using (var db = this._Support.CreateConnection())
					{
						<#= backingMemberName #> = db.LoadModels<<#= member.Relation.ForeignType.FullName #>>(
							new LoadOptions()
							{
								Joins = "<#= string.Format("JOIN {0} ON {0}.{1} = {2}.{3}",
									manyToMany.TableName,
									manyToMany.ForeignKey2,
									foreignModelInfo.TableName,
									foreignModelInfo.ID.FieldName) #>",

								Where = "<#= manyToMany.TableName + "." + manyToMany.ForeignKey1 #> = @<#= manyToMany.ForeignKey1 #>",

								ParamValues = new object[] { <#= ModelInfo.ID.Name #> }
							}).ToList();
					}
					_Support.HasMemberLoaded["<#= member.Name #>"] = true;
				}
				
				return <#= backingMemberName #>;
			}
			set
			{
				if (value == null)
				{
					if (_Support.HasMemberLoaded["<#= member.Name #>"])
					{
						<#= backingMemberName #>.Clear();
					}
				}
				else
				{
					<#= backingMemberName #> = value;
				}
				
				_Support.HasMemberLoaded["<#= member.Name #>"] = true;
			}
		}
<#
	}
	
	foreach (var member in modelInfo.Members)
	{
		addedMembers.Add(member.Name);
	}
}
#>
	}
}