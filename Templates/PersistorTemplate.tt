<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="Persisto" #>
<#@ parameter name="ModelInfo" type="Persisto.IDbModelInfo" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Data;
using System.Data.Common;
using System.Reflection;
using Persisto;
using <#= ModelInfo.ModelType.Namespace #>;

namespace Persisto.Generated.Persistors
{
	public class <#= ModelInfo.ModelType.Name #>Persistor : PersistorBase, IPersistor<<#= ModelInfo.ModelType.FullName #>>
	{
		public <#= ModelInfo.ModelType.Name #>Persistor(IDbModelInfo<<#= ModelInfo.ModelType.Name #>> modelInfo)
			: base(modelInfo)
		{
			ModelInfo = modelInfo;

<#
var membersWithFields = 
	ModelInfo.Members
	.Where(m => m.IsBackedByField)
	.ToArray();

foreach (IDbMemberInfo member in ModelInfo.Members)
{
	WriteLine("\t\t\tMemberInfo_{0} = modelInfo[\"{0}\"];", member.Name);
}
#>
		}
		
		new public IDbModelInfo<<#= ModelInfo.ModelType.Name #>> ModelInfo { get; private set; }
		
<#
foreach (IDbMemberInfo member in ModelInfo.Members)
{
	WriteLine("\t\tinternal IDbMemberInfo MemberInfo_" + member.Name + " { get; private set; }");
}
#>

		new public IEnumerable<<#= ModelInfo.ModelType.FullName #>> LoadModels(
			System.Data.Common.DbConnection db,
			Persisto.LoadOptions options)
		{
			var models = new List<<#= ModelInfo.ModelType.FullName #>>();
			
			Func<System.Data.Common.DbConnection> createConnection = options.CreateConnectionFunc;
			if (createConnection == null)
			{
				createConnection = DbModelInfo.CreateConnectionFunc;
			}

			using (var command = db.CreateCommand())
			{
<#
// Build sql for loading models

var baseModelInfos = new Stack<IDbModelInfo>();

var info = ModelInfo;
IDbModelInfo veryBaseModelInfo = null;

while (info != null)
{
	baseModelInfos.Push(info);
	veryBaseModelInfo = info;
	info = info.BaseModelInfo;
}

var selectSql = new StringBuilder();
selectSql.Append("SELECT ");

var fromSql = new StringBuilder();

var addedFirstTable = false;
IDbModelInfo firstTable;

var fieldOffsets = new Dictionary<IDbModelInfo, int>();
var fieldOffset = 0;

var familyOfModelInfos = new List<IDbModelInfo>();

var addedFirstField = false;

if (!string.IsNullOrWhiteSpace(veryBaseModelInfo.TypeNameFieldName))
{
	selectSql.Append(veryBaseModelInfo.TableName + "." + veryBaseModelInfo.TypeNameFieldName);
	addedFirstField = true;
	fieldOffset++;
}

while (baseModelInfos.Count > 0)
{
	info = baseModelInfos.Pop();

	familyOfModelInfos.Add(info);

	fieldOffsets.Add(info, fieldOffset);

	foreach (var memberInfo in info.Members.Where(m => m.IsBackedByField))
	{
		if (addedFirstField)
		{
			selectSql.Append(", ");
		}
		else
		{
			addedFirstField = true;
		}
		selectSql.Append(info.TableName + "." + memberInfo.FieldName);
		fieldOffset++;
	}

	if (addedFirstTable)
	{
		fromSql.Append(string.Format(
			" JOIN {0} ON ({0}.{1} = {2}.{3}){4}",
			info.TableName,
			info.ID.FieldName,
			info.BaseModelInfo.TableName,
			info.BaseModelInfo.ID.FieldName,
			string.IsNullOrWhiteSpace(info.Filter) ? "" : " AND (" + info.Filter + ")"));
	}
	else
	{
		firstTable = info;
		addedFirstTable = true;
		fromSql.Append(" FROM " + info.TableName);
	}
}

Action<IDbModelInfo> addDescendents = null;

addDescendents = (IDbModelInfo modelInfo) =>
{
	foreach (var subTypeInfo in modelInfo.Descendents)
	{
		familyOfModelInfos.Add(subTypeInfo);

		fieldOffsets.Add(subTypeInfo, fieldOffset);

		foreach (var memberInfo in subTypeInfo.Members.Where(m => m.IsBackedByField))
		{
			if (addedFirstField)
			{
				selectSql.Append(", ");
			}
			else
			{
				addedFirstField = true;
			}
			selectSql.Append(subTypeInfo.TableName + "." + memberInfo.FieldName);
			fieldOffset++;
		}

		fromSql.Append(string.Format(
			" LEFT OUTER JOIN {0} ON ({0}.{1} = {2}.{3}){4}",
			subTypeInfo.TableName,
			subTypeInfo.ID.FieldName,
			modelInfo.TableName,
			modelInfo.ID.FieldName,
			string.IsNullOrWhiteSpace(subTypeInfo.Filter) ? "" : " AND (" + subTypeInfo.Filter + ")"));

		addDescendents(subTypeInfo);
	}
};

addDescendents(ModelInfo);
#>
				var loadSql = new StringBuilder(@"<#= (selectSql.ToString() + " " + fromSql.ToString()).Replace("\n", " ").Replace("\r", " ") #>");

				if (!string.IsNullOrWhiteSpace(options.Joins))
				{
					loadSql.Append(" " + options.Joins + " ");
				}
				
				if (!string.IsNullOrWhiteSpace(options.Where))
				{
					if (!options.Where.Trim().ToLower().StartsWith("where"))
					{
						loadSql.Append(" WHERE");
					}
					loadSql.Append(" " + options.Where + " ");
				}

				if (!string.IsNullOrWhiteSpace(options.OrderBy))
				{
					if (!options.Where.Trim().ToLower().StartsWith("order by"))
					{
						loadSql.Append(" ORDER BY");
					}
					loadSql.Append(" " + options.OrderBy + " ");
				}

				command.CommandText = loadSql.ToString();
				
				var paramNames = options.GetParamNames();

				if (options.ParamValues != null)
				{
					for (var index = 0; index < options.ParamValues.Length; index++)
					{
						command.CreateParameter(paramNames[index], options.ParamValues[index]);
					}
				}

				Dictionary<string, Type> quickTypeLookup = new Dictionary<string, Type>();
				Assembly assembly = Assembly.GetExecutingAssembly();
				
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
<#
if (!string.IsNullOrWhiteSpace(veryBaseModelInfo.TypeNameFieldName))
{
	WriteLine("\t\t\t\t\t\tstring modelTypeName = reader.GetString(0);");
	WriteLine("\t\t\t\t\t\tType modelType;");
	WriteLine("\t\t\t\t\t\tif (!quickTypeLookup.TryGetValue(modelTypeName, out modelType))");
	WriteLine("\t\t\t\t\t\t{");
	WriteLine("\t\t\t\t\t\t\tmodelType = assembly.GetType(modelTypeName);");
	WriteLine("\t\t\t\t\t\t\tquickTypeLookup.Add(modelTypeName, modelType);");
	WriteLine("\t\t\t\t\t\t}");
	WriteLine("\t\t\t\t\t\tvar model = (Persisto.IGeneratedModel)Activator.CreateInstance(modelType);", ModelInfo.GeneratedModelTypeFullName);
}
else
{
	WriteLine("\t\t\t\t\t\tvar model = new {0}();", ModelInfo.GeneratedModelTypeFullName);
}
#>
						
						model._Support.CreateConnectionFunc = createConnection;
<#
foreach (var modelInfo in familyOfModelInfos)
{
	WriteLine("\t\t\t\t\t\t{0}.SetFieldsFromReader(model as {1}, reader, {2});",
		"Persisto.Generated.Persistors." + modelInfo.ModelType.Name + "Persistor",
		modelInfo.ModelType.FullName,
		fieldOffsets[modelInfo]);
}
#>
						model._Support.ExistsInDatabase = true;
						
						models.Add((<#=ModelInfo.ModelType.FullName#>)model);
					}
				}
			}

			return models;
		}

		internal static void SetFieldsFromReader(<#= ModelInfo.ModelType.FullName #> model, DbDataReader reader, int fieldOffset)
		{
			if (model == null)
			{
				return;
			}

			var generatedModel = (IGeneratedModel)model;

<#
for (var memberIndex = 0; memberIndex < ModelInfo.Members.Length; memberIndex++)
{
	DbMemberInfo member = ModelInfo.Members[memberIndex];
	string memberName = "model." + member.Name;
	
	Type memberType = member.MemberType;
	
	string method = "";
	
	var manyToOne = member.Relation as DbRelation.ManyToOneAttribute;
	var oneToMany = member.Relation as DbRelation.OneToManyAttribute;
	var manyToMany = member.Relation as DbRelation.ManyToManyAttribute;

	var foreignTypeModelInfo = member.Relation == null ? null : DbModelInfo.Get(member.Relation.ForeignType);
	
	if (member.Relation != null)
	{
		if (manyToOne != null)
		{
			WriteLine("\t\t\t// ManyToOne");
			if ((bool)member.Relation.LoadOnDemand)
			{
				IDbModelInfo foreignModelInfo = DbModelInfo.Get(member.Relation.ForeignType);
				
				memberType = foreignModelInfo.ID.MemberType;
				
				WriteLine("{0}generatedModel._Support.HasMemberLoaded[\"{1}\"] = false;", "\t\t\t", member.Name);

				memberName = string.Format("generatedModel._Support.ObjectIds[\"{0}\"]", member.Name + foreignModelInfo.ID.Name);
				//continue;
			}
			else
			{
				method = 
					"DbModelInfo.Get<" + member.MemberType.FullName +
					">().Persistor.LoadModel(db, new LoadOptions() { Where = \"" +
					foreignTypeModelInfo.ID.FieldName + " = @" + foreignTypeModelInfo.ID.FieldName +
					"\", ParamValues = new object[] { reader.GetValue(fieldOffset + " + memberIndex.ToString() + ") } })";
				
				WriteLine("{0}{1} = {2};", "\t\t\t", memberName, method);
				
				continue;
			}
		}
		else if (oneToMany != null)
		{
			WriteLine("\t\t\t// OneToMany");
			if (!member.Relation.LoadOnDemand)
			{
#>
						model.<#= member.Name #> = db.LoadModels<<#= member.Relation.ForeignType.FullName #>>(
							new LoadOptions()
							{
								Where = "<#= member.FieldName #> = @<#= member.FieldName #>",
								ParamValues = new object[] { model.<#= ModelInfo.ID.Name #> } 
							}).ToList();
<#
			}
			continue;
		}
		else
		{
			// TODO: Support ManyToMany
			WriteLine("\t\t\t// ManyToMany");
			continue;
		}
	}

	if (!member.IsBackedByField)
	{
		continue;
	}

	if (memberType == typeof(Guid))
	{
		if (member.DataType == DbType.Guid)
		{
			method = string.Format("reader.IsDBNull(fieldOffset + {0}) ? default(Guid) : new Guid(reader.GetValue(fieldOffset + {0}))", memberIndex);
		}
		else
		{
			method = string.Format("reader.IsDBNull(fieldOffset + {0}) ? default(Guid) : new Guid(reader.GetString(fieldOffset + {0}))", memberIndex);
		}
	}
	else if (memberType == typeof(int))
	{
		method = string.Format("reader.GetInt32(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(Int16))
	{
		method = string.Format("reader.GetInt16(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(Int64))
	{
		method = string.Format("reader.GetInt64(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(DateTime))
	{
		method = string.Format("reader.GetDateTime(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(string))
	{
		method = string.Format("reader.GetString(fieldOffset + {0})", memberIndex);
	}
	else if (memberType == typeof(double))
	{
		method = string.Format("reader.GetDouble(fieldOffset + {0})", memberIndex);
	}
	else if (memberType.IsEnum)
	{
		if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString))
		{
			method = string.Format("({0})Enum.Parse(typeof({0}), reader.GetString(fieldOffset + {1}))",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int16)
		{
			method = string.Format("({0})reader.GetInt16(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int32)
		{
			method = string.Format("({0})reader.GetInt32(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Int64)
		{
			method = string.Format("({0})reader.GetInt64(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else if (member.DataType == DbType.Byte)
		{
			method = string.Format("({0})reader.GetByte(fieldOffset + {1})",
				member.MemberType.FullName, memberIndex);
		}
		else
		{
			continue;
		}
	}
	else if (memberType == typeof(bool))
	{
		if (member.DataType == DbType.Boolean)
		{
			method = string.Format("reader.GetBoolean(fieldOffset + {0})", memberIndex);
		}
		else if (member.DataType == DbType.Int16)
		{
			method = string.Format("reader.GetInt16(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Int32)
		{
			method = string.Format("reader.GetInt32(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Int64)
		{
			method = string.Format("reader.GetInt64(fieldOffset + {0}) > 0", memberIndex);
		}
		else if (member.DataType == DbType.Byte)
		{
			method = string.Format("reader.GetByte(fieldOffset + {0}) > 0", memberIndex);
		}
		else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString))
		{
			method = string.Format(
				"!reader.GetString(fieldOffset + {0}).Equals(\"N\", StringComparison.CurrentCultureIgnoreCase)", memberIndex);
		}
		else
		{
			continue;
		}
	}
	else
	{
		continue;
	}
	
	WriteLine("{0}{1} = {2};", "\t\t\t", memberName, method);
}
#>
		}

<#

Action<bool, bool> setParameters =
	delegate(bool includeId, bool useIncrementorValues)
	{
		for (var memberIndex = 0; memberIndex < membersWithFields.Length; memberIndex++)
		{
			DbMemberInfo member = membersWithFields[memberIndex];
			string memberName = member.Name;
			var expression = "";

			if (member.IsIdentity && !includeId)
			{
				continue;
			}

			if (useIncrementorValues && (member.Incrementor != null))
			{
				expression = "newValueFor" + memberName + ".ToString()";
			}
			else if (member.Relation != null)
			{
				if (member.Relation is DbRelation.ManyToOneAttribute)
				{
					IDbModelInfo foreignModelInfo = DbModelInfo.Get(member.Relation.ForeignType);
					
					if ((bool)member.Relation.LoadOnDemand)
					{
						string generatedModelTypeName = "Persisto.Generated.Models." + ModelInfo.ModelType.Name;						
						
						string foreignModelIdName = foreignModelInfo.ID.Name;
						string cast = foreignModelInfo.ID.MemberType == typeof(Guid) ? "(Guid)" : "";
						string toString = foreignModelInfo.ID.MemberType == typeof(Guid) ?  ".ToString(true)" : "";
						
						expression = string.Format(
							"model is IGeneratedModel ? ({4}(((IGeneratedModel)model)._Support.ObjectIds[\"{1}{2}\"])){3} : (model.{1} == null ? null : (object)model.{1}.{2}{3})",
							generatedModelTypeName,
							member.Name,
							foreignModelIdName,
							toString,
							cast);
					}
					else
					{
						string foreignModelIdName = foreignModelInfo.ID.Name;
						if (foreignModelInfo.ID.MemberType == typeof(Guid))
						{
							foreignModelIdName += ".ToString(true)";
						}
						
						expression = string.Format("model.{0} == null ? null : model.{0}.{1}",
							member.Name,
							foreignModelIdName);
					}
				}
				else if (member.Relation is DbRelation.OneToManyAttribute)
				{
					continue;
				}
				else
				{
					// TODO: Support OneToMany + ManyToMany
					continue;
				}
			}
			else
			{
				if (member.MemberType.IsEnum)
				{
					if ((member.DataType == DbType.Int16) || (member.DataType == DbType.Int32) ||
						(member.DataType == DbType.Int64) || (member.DataType == DbType.Byte) ||
						(member.DataType == DbType.SByte))
					{
						expression = string.Format("(int)model.{0}", memberName);
					}
					else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString) ||
							(member.DataType == DbType.AnsiStringFixedLength))
					{
						expression = string.Format("model.{0}.ToString()", memberName);
					}
				}
				else if (member.MemberType == typeof(bool))
				{
					if ((member.DataType == DbType.Int16) || (member.DataType == DbType.Int32) ||
						(member.DataType == DbType.Int64) || (member.DataType == DbType.Byte) ||
						(member.DataType == DbType.SByte))
					{
						expression = string.Format("model.{0} ? 1 : 0", memberName);
					}
					else if ((member.DataType == DbType.String) || (member.DataType == DbType.AnsiString) ||
							(member.DataType == DbType.AnsiStringFixedLength))
					{
						expression = string.Format("model.{0} ? \"Y\" : \"N\"", memberName);
					}
					else
					{
						expression = "model." + memberName;
					}
				}
				else if (member.MemberType == typeof(Guid))
				{
					expression = "model." + memberName + ".ToString(true)";
				}
				else
				{
					expression = "model." + memberName;
				}
			}

			WriteLine("{0}command.CreateParameter(\"@{1}\", {2});", "\t\t\t\t", member.FieldName, expression);
		}
	};

#>
		
		new public <#= ModelInfo.ModelType.FullName #> LoadModel(
			System.Data.Common.DbConnection db,
			Persisto.LoadOptions options)
		{
			var models = LoadModels(db, options);

			var model = models.FirstOrDefault();

			return model;
		}

		/*
		var param = cmd.CreateParameter();
					param.ParameterName = "";
					param.DbType = DbExtensions.DbTypeFromType(typeof(string));
					param.Direction = System.Data.ParameterDirection.Input;
					cmd.Parameters.Add(param);
		*/
		
<#
Action<IDbModelInfo> addManyToManyUpdateMethods = (IDbModelInfo modelInfo) =>
{
	foreach (var member in modelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
	{
		var relation = (DbRelation.ManyToManyAttribute)member.Relation;
		var foreignModelInfo = DbModelInfo.Get(relation.ForeignType);

		var localIDSuffix = modelInfo.ID.MemberType == typeof(Guid) ? ".ToString(true)" : "";
		var foreignIDSuffix = foreignModelInfo.ID.MemberType == typeof(Guid) ? ".ToString(true)" : "";
#>
		public void Update_<#= member.Name #>(System.Data.Common.DbConnection db, <#= modelInfo.ModelType.FullName #> model)
		{
			var generatedModel = model as IGeneratedModel;
			
			if (generatedModel != null)
			{
				if (!generatedModel._Support.HasMemberLoaded["<#= member.Name #>"])
				{
					// <#= member.Name #> couldn't have changed as it hasn't been flagged as loaded
					return;
				}
			}
			else
			{
				if (model.<#= member.Name #> == null)
				{
					// If member is null then just assume we don't need to update it
					return;
				}
			}
			
			// Get a list of existing <#= foreignModelInfo.ModelType.Name #> <#= foreignModelInfo.ID.Name #>s for this <#= modelInfo.ModelType.Name #>
			var existingList = new List<string>();
			using (var existing = db.CreateCommand())
			{
				existing.CommandText = "SELECT <#= relation.ForeignKey2 #> FROM <#= relation.TableName #> WHERE <#= relation.ForeignKey1 #> = @<#= relation.ForeignKey1 #>";
				existing.CreateParameter("<#= relation.ForeignKey1 #>", DbType.String, model.<#= modelInfo.ID.Name + localIDSuffix #>);
				
				using (var reader = existing.ExecuteReader())
				{
					while (reader.Read())
					{
						existingList.Add(reader.GetString(0));
					}
				}
			}

			using (var insert = db.CreateCommand())
			{
				insert.CommandText = "INSERT INTO <#= relation.TableName #> (<#= relation.ForeignKey1 #>, <#= relation.ForeignKey2 #>) VALUES (@<#= relation.ForeignKey1 #>, @<#= relation.ForeignKey2 #>)";
				insert.CreateParameter("<#= relation.ForeignKey1 #>", DbType.String, null);
				insert.CreateParameter("<#= relation.ForeignKey2 #>", DbType.String, null);
					
				foreach (var item in model.Formats)
				{
					var index = existingList.IndexOf(item.Id.ToString());
						
					if (index == -1)
					{
						insert.Parameters[0].Value = model.<#= modelInfo.ID.Name + localIDSuffix #>;
						insert.Parameters[1].Value = item.<#= foreignModelInfo.ID.Name + foreignIDSuffix #>;
						insert.ExecuteNonQuery();
					}
					else
					{
						existingList.RemoveAt(index);
					}
				}
			}
				
			if (existingList.Count > 0)
			{
				using (var delete = db.CreateCommand())
				{
					delete.CommandText = "DELETE FROM <#= relation.TableName #> WHERE <#= relation.ForeignKey1 #> = @<#= relation.ForeignKey1 #> AND <#= relation.ForeignKey2 #> = @<#= relation.ForeignKey2 #>";
					delete.CreateParameter("<#= relation.ForeignKey1 #>", DbType.String, null);
					delete.CreateParameter("<#= relation.ForeignKey2 #>", DbType.String, null);
						
					foreach (var id in existingList)
					{
						delete.Parameters[0].Value = model.<#= modelInfo.ID.Name + localIDSuffix #>;
						delete.Parameters[1].Value = id;
						delete.ExecuteNonQuery();
					}
				}
			}
		}
<#
	}
};

addManyToManyUpdateMethods(ModelInfo);
#>

		public void InsertModel(
			System.Data.Common.DbConnection db,
			<#= ModelInfo.ModelType.FullName #> model)
		{
			if (ModelInfo.BaseModelInfo != null)
			{
				ModelInfo.BaseModelInfo.Persistor.InsertModel(db, model);
			}
			
			using (var command = db.CreateCommand())
			{
<#

StringBuilder insertSql = new StringBuilder("INSERT INTO " + ModelInfo.TableName);

List<string> fieldNamesToInsert = new List<string>();
fieldNamesToInsert.AddRange(membersWithFields.Select(m => m.FieldName));
if (!string.IsNullOrWhiteSpace(ModelInfo.TypeNameFieldName))
{
	fieldNamesToInsert.Add(ModelInfo.TypeNameFieldName);
}

insertSql.Append(" (" + string.Join(", ", fieldNamesToInsert.ToArray()) + ")");
insertSql.Append(" VALUES (@" + string.Join(", @", fieldNamesToInsert.ToArray()) + ")");

#>
				command.CommandText = "<#= insertSql.ToString() #>";

<#
foreach (IDbMemberInfo member in ModelInfo.Members.Where(m => m.Incrementor != null))
{
	WriteLine("\t\t\t\tvar newValueFor{0} = model.{0} != default({1}) ? model.{0} : ({1})MemberInfo_{0}.Incrementor.Increment(ModelInfo, MemberInfo_{0}, model);", member.Name, member.MemberType.FullName);
}

WriteLine("");

setParameters(true, true);

if (!string.IsNullOrWhiteSpace(ModelInfo.TypeNameFieldName))
{
	WriteLine("\t\t\t\tcommand.CreateParameter(\"@{0}\", model.GetType().FullName);", ModelInfo.TypeNameFieldName);
}
#>

				command.ExecuteNonQuery();

<#
foreach (IDbMemberInfo member in ModelInfo.Members.Where(m => m.Incrementor != null))
{
	WriteLine("\t\t\t\tmodel.{0} = newValueFor{0};", member.Name);
}
#>				var generatedModel = model as Persisto.IGeneratedModel;
				if (generatedModel != null)
				{
					generatedModel._Support.ExistsInDatabase = true;
				}

<#
foreach (var member in ModelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
{
	WriteLine("\t\t\t\tUpdate_{0}(db, model);", member.Name);
}
#>
			}
		}
		
		public void UpdateModel(
			System.Data.Common.DbConnection db,
			<#= ModelInfo.ModelType.FullName #> model)
		{
			if (ModelInfo.BaseModelInfo != null)
			{
				ModelInfo.BaseModelInfo.Persistor.UpdateModel(db, model);
			}
			
			using (var command = db.CreateCommand())
			{
<#
StringBuilder updateSql = new StringBuilder("UPDATE " + ModelInfo.TableName + " SET ");
updateSql.Append(string.Join(", ", membersWithFields
	.Where(m => !m.IsIdentity)
	.Select(m => string.Format("{0} = @{0}", m.FieldName)).ToArray()));
updateSql.Append(" WHERE " + string.Format("{0} = @{0}", ModelInfo.ID.FieldName));
#>
				command.CommandText = @"<#= updateSql.ToString() #>";
				
<# setParameters(false, false); #>
				
				command.ExecuteNonQuery();
				
				var generatedModel = model as Persisto.IGeneratedModel;
				if (generatedModel != null)
				{
					generatedModel._Support.ExistsInDatabase = true;
				}

<#
foreach (var member in ModelInfo.Members
		.Where(m => m.Relation is DbRelation.ManyToManyAttribute))
{
	WriteLine("\t\t\t\tUpdate_{0}(db, model);", member.Name);
}
#>
			}
		}
		
		public void DeleteModel(
			System.Data.Common.DbConnection db,
			<#= ModelInfo.ModelType.FullName #> model)
		{
			using (var command = db.CreateCommand())
			{
				command.CommandText = @"DELETE FROM <#= ModelInfo.TableName #> WHERE <#= ModelInfo.ID.FieldName #> = @<#= ModelInfo.ID.FieldName #>";
				
				command.CreateParameter(
					"@<#= ModelInfo.ID.FieldName #>",
					System.Data.DbType.<#= ModelInfo.ID.DataType.ToString() #>,
					model.<#= ModelInfo.ID.Name #>,
					true);
				
				command.ExecuteNonQuery();
				
				var generatedModel = model as Persisto.IGeneratedModel;
				if (generatedModel != null)
				{
					generatedModel._Support.ExistsInDatabase = false;
				}
			}
		}
	}
}